module.exports = /* eslint-disable */ [{"name":"EZHamburger","description":"Hamburger menu toggle","props":{"onClick":{"type":{"name":"func"},"required":true,"description":"Logic that gets ran when the hamburger is clicked"},"active":{"type":{"name":"bool"},"required":false,"description":"If the Hamburger Button is toggled/active or not.","defaultValue":{"value":"false","computed":false}},"animation":{"type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'spin'","computed":false}]},"required":false,"description":"name of the animation type you want the hamburger to play","defaultValue":{"value":"'none'","computed":false}},"positionOnToggle":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false},{"value":"'fixed-top-right'","computed":false},{"value":"'fixed-top-left'","computed":false}]},"required":false,"description":"positioning of the hamburger when the menu is toggled","defaultValue":{"value":"'normal'","computed":false}},"style":{"type":{"name":"custom","raw":"PropTypes.shape"},"required":false,"description":"any additioning css style you want to apply","defaultValue":{"value":"{}","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nrequire('./EZHamburger.sass');\n\n\n/** Hamburger menu toggle */\n\nfunction EZHamburger({ onClick, active, animation, positionOnToggle, style }) {\n    const classes = classNames(\n        `ez-hamburger-animation-${animation}`,\n        {\n            'ez-hamburger': true,\n            'ez-hamburger-active': active,\n            'ez-fixed-top-right': positionOnToggle === 'fixed-top-right',\n            'ez-fixed-top-left': positionOnToggle === 'fixed-top-left',\n        });\n\n    return (\n        <div role=\"presentation\" style={{ ...style }} onClick={onClick} className={classes}>\n            <div className=\"ez-hamburger-box\">\n                <div className=\"ez-hamburger-inner\" />\n            </div>\n        </div>\n    );\n}\n\nEZHamburger.propTypes = {\n    /** Logic that gets ran when the hamburger is clicked */\n    onClick: PropTypes.func.isRequired,\n\n    /** If the Hamburger Button is toggled/active or not. */\n    active: PropTypes.bool,\n\n    /** name of the animation type you want the hamburger to play */\n    animation: PropTypes.oneOf(['none', 'spin']),\n\n    /** positioning of the hamburger when the menu is toggled */\n    positionOnToggle: PropTypes.oneOf(['normal', 'fixed-top-right', 'fixed-top-left']),\n\n    /** any additioning css style you want to apply */\n    style: PropTypes.shape,\n};\n\nEZHamburger.defaultProps = {\n    active: false,\n    animation: 'none',\n    positionOnToggle: 'normal',\n    style: {},\n};\n\nexport default EZHamburger;\n","examples":[{"name":"ExampleSpinAnimation","description":"When toggled does spin animation","code":"import React from 'react';\nimport EZHamburger from 'EZHeader/EZHamburger';\n\n/** When toggled does spin animation */\nclass ExampleSpinAnimation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggled: false,\n        };\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState(prevState => ({\n            toggled: !prevState.toggled,\n        }));\n    }\n\n    render() {\n        return (\n            <div style={{ height: '50px', width: '50px' }}>\n                <EZHamburger\n                    active={this.state.toggled}\n                    animation=\"spin\"\n                    onClick={this.toggle}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ExampleSpinAnimation;\n"}]},{"name":"EZHeader","description":"","props":{"screenSizeMin":{"type":{"name":"number"},"required":true,"description":"Min screen size for this menu to be visible"},"screenSizeMax":{"type":{"name":"number"},"required":true,"description":"Max screen size for this header to be visible"},"height":{"type":{"name":"number"},"required":true,"description":"Height of the header"},"children":{"type":{"name":"element"},"required":true,"description":"child rows in the header"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nrequire('./EZHeader.sass');\n\nclass EZHeader extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            isVisible: false,\n        };\n    }\n\n    componentDidMount() {\n        this.setIsVisibleState();\n        window.addEventListener('resize', this.setIsVisibleState.bind(this));\n    }\n\n    setIsVisibleState() {\n        const clientWidth = document.documentElement.clientWidth;\n        if (clientWidth <= this.props.screenSizeMax && clientWidth >= this.props.screenSizeMin) {\n            this.setState({ isVisible: true });\n        } else {\n            this.setState({ isVisible: false });\n        }\n    }\n\n    render() {\n        const { height, children } = this.props;\n        const display = this.state.isVisible ? 'block' : 'none';\n\n        return (\n            <div className=\"ez-header\" style={{ height, display }}>\n                { children }\n            </div>\n        );\n    }\n}\n\nEZHeader.propTypes = {\n    /** Min screen size for this menu to be visible */\n    screenSizeMin: PropTypes.number.isRequired,\n\n    /** Max screen size for this header to be visible */\n    screenSizeMax: PropTypes.number.isRequired,\n\n    /** Height of the header */\n    height: PropTypes.number.isRequired,\n\n    /** child rows in the header */\n    children: PropTypes.element.isRequired,\n};\n\nEZHeader.defaultProps = {};\n\nexport default EZHeader;\n","examples":[{"name":"ExampleHeaderPush","description":"Slide down full screen menu animation.","code":"import React from 'react';\nimport EZHeader from 'EZHeader/EZHeader';\nimport EZRow from 'EZHeader/EZHeaderRow';\nimport EZColumn from 'EZHeader/EZHeaderColumn';\n\n/** Slide down full screen menu animation. */\nclass ExampleHeaderPush extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggled: false,\n        };\n    }\n\n    render() {\n        return (\n            <EZHeader screenSizeMin={0} screenSizeMax={2000} height=\"80px\">\n                <EZRow height=\"40px\">\n                    <EZColumn width=\"40%\">\n                        <div />\n                    </EZColumn>\n                    <EZColumn width=\"60%\">\n                        <div />\n                    </EZColumn>\n                </EZRow>\n\n                <EZRow height=\"20px\">\n                    <EZColumn width=\"80%\">\n                        <div />\n                    </EZColumn>\n                    <EZColumn width=\"10%\">\n                        <div />\n                    </EZColumn>\n                    <EZColumn width=\"10%\">\n                        <div />\n                    </EZColumn>\n                </EZRow>\n\n                <EZRow height=\"20px\">\n                    <EZColumn width=\"100%\">\n                        <div />\n                    </EZColumn>\n                </EZRow>\n            </EZHeader>\n        );\n    }\n}\n\nexport default ExampleHeaderPush;\n"}]},{"name":"EZHeaderColumn","description":"Column that will hold header items","props":{"width":{"type":{"name":"string"},"required":true,"description":"width of how much you want the column to take of the parent row."},"children":{"type":{"name":"element"},"required":true,"description":"the header elements you want to place. can also be another row."}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nrequire('./EZHeaderColumn.sass');\n\n/** Column that will hold header items */\nfunction EZHeaderColumn({ width, children }) {\n    return (\n        <div style={{ width }} className=\"ez-header-column\">\n            { children }\n        </div>\n    );\n}\n\nEZHeaderColumn.propTypes = {\n    /** width of how much you want the column to take of the parent row. */\n    width: PropTypes.string.isRequired,\n\n    /** the header elements you want to place. can also be another row. */\n    children: PropTypes.element.isRequired,\n};\n\nexport default EZHeaderColumn;\n","examples":[]},{"name":"EZHeaderRow","description":"Nav to contain NavItems","props":{"height":{"type":{"name":"string"},"required":true,"description":"Height of the row in the header in a valid CSS measurement"},"children":{"type":{"name":"element"},"required":true,"description":"Columns in the row, the widths of the columns need to add to 100%"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nrequire('./EZHeaderRow.sass');\n\n/** Nav to contain NavItems */\n\nfunction EZHeaderRow({ height, children }) {\n    return (\n        <div style={{ height }} className=\"ez-header-row\">\n            { children }\n        </div>\n    );\n}\n\nEZHeaderRow.propTypes = {\n    /** Height of the row in the header in a valid CSS measurement */\n    height: PropTypes.string.isRequired,\n\n    /** Columns in the row, the widths of the columns need to add to 100% */\n    children: PropTypes.element.isRequired,\n};\n\nexport default EZHeaderRow;\n","examples":[]},{"name":"EZNav","description":"Nav to contain NavItems","props":{"isMobileView":{"type":{"name":"bool"},"required":false,"description":"If the screen size is the size for toggling mobile","defaultValue":{"value":"false","computed":false}},"children":{"type":{"name":"element"},"required":true,"description":"All the items you want to place in the nav section"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nrequire('./EZNav.sass');\n\n/** Nav to contain NavItems */\n\nfunction EZNav({ children, isMobileView }) {\n    const navItemClass = classNames({\n        'ez-nav': true,\n        'ez-hide': isMobileView,\n    });\n\n    return (\n        <div className={navItemClass}>\n            { children }\n        </div>\n    );\n}\n\nEZNav.propTypes = {\n    /** If the screen size is the size for toggling mobile */\n    isMobileView: PropTypes.bool,\n\n    /** All the items you want to place in the nav section */\n    children: PropTypes.element.isRequired,\n};\n\nEZNav.defaultProps = {\n    isMobileView: false,\n};\n\nexport default EZNav;\n","examples":[{"name":"ExampleNav","description":"Simple Nav that goes on a header","code":"import React from 'react';\nimport EZNav from 'EZHeader/EZNav';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n/** Simple Nav that goes on a header */\nfunction ExampleNav() {\n    return (\n        <div>\n            <EZNav>\n                <EZNavItem value=\"test\" />\n                <EZNavItem value=\"test2\" />\n                <EZNavItem value=\"test3\" />\n            </EZNav>\n        </div>\n    );\n}\n\nexport default ExampleNav;\n"},{"name":"ExampleNavFixed","description":"Nav with fixed width and height on the nav items and a slide right animation","code":"import React from 'react';\nimport EZNav from 'EZHeader/EZNav';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n/** Nav with fixed width and height on the nav items and a slide right animation */\nfunction ExampleNavFixed() {\n    return (\n        <div>\n            <EZNav>\n                <EZNavItem style={{ height: '50px' }} hoverTransition={'slideRight'} fixedWidth={'60px'} value=\"test\" />\n                <EZNavItem style={{ height: '50px' }} hoverTransition={'slideRight'} fixedWidth={'60px'} value=\"test2\" />\n                <EZNavItem style={{ height: '50px' }} hoverTransition={'slideRight'} fixedWidth={'60px'} value=\"test3\" />\n            </EZNav>\n        </div>\n    );\n}\n\nexport default ExampleNavFixed;\n"}]},{"name":"EZNavItem","description":"Nav Item for Nav list","props":{"value":{"type":{"name":"string"},"required":true,"description":"What the nav item displays."},"fixedWidth":{"type":{"name":"string"},"required":false,"description":"if you want to set a fixed width for your nav item,\nif its set to 0 it will use the auto width","defaultValue":{"value":"'auto'","computed":false}},"colorStyles":{"type":{"name":"shape","value":{"fontColor":{"name":"string","required":false},"fontColorHover":{"name":"string","required":false},"backgroundColor":{"name":"string","required":false},"backgroundColorHover":{"name":"string","required":false}}},"required":false,"description":"string of color that you want to use for background","defaultValue":{"value":"{\n    fontColor: 'black',\n    fontColorHover: 'blue',\n    backgroundColor: 'red',\n    backgroundColorHover: 'pink',\n}","computed":false}},"hoverTransition":{"type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'slideRight'","computed":false},{"value":"'slideLeft'","computed":false},{"value":"'rectangleIn'","computed":false}]},"required":false,"description":"type of transition you want the nav item to do when it's hovered","defaultValue":{"value":"'none'","computed":false}},"style":{"type":{"name":"custom","raw":"PropTypes.shape"},"required":false,"description":"any additional styles","defaultValue":{"value":"{}","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Radium from 'radium';\n\nimport EZNavItemStyler from './EZNavItemStyler';\n\nrequire('./EZNavItem.sass');\n\n/** Nav Item for Nav list */\nfunction EZNavItem({ value, fixedWidth, colorStyles, hoverTransition, style }) {\n    const styleObject = EZNavItemStyler(fixedWidth, colorStyles, hoverTransition);\n\n    return (\n        <div style={{ display: 'inline-block' }}>\n            <div\n                className={styleObject.classes.navItemClass}\n                style={{ ...styleObject.styles.navItemStyle, ...style }}\n            >\n                <div className=\"ez-nav-item-value\">\n                    { value }\n                    <div\n                        style={styleObject.styles.navBackground1Style}\n                        className={styleObject.classes.navBackground1Class}\n                    />\n                    <div\n                        style={styleObject.styles.navBackground2Style}\n                        className={styleObject.classes.navBackground2Class}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nEZNavItem.propTypes = {\n    /** What the nav item displays. */\n    value: PropTypes.string.isRequired,\n\n    /** if you want to set a fixed width for your nav item,\n     * if its set to 0 it will use the auto width */\n    fixedWidth: PropTypes.string,\n\n    /** string of color that you want to use for background */\n    colorStyles: PropTypes.shape({\n        fontColor: PropTypes.string,\n        fontColorHover: PropTypes.string,\n        backgroundColor: PropTypes.string,\n        backgroundColorHover: PropTypes.string,\n    }),\n\n    /** type of transition you want the nav item to do when it's hovered */\n    hoverTransition: PropTypes.oneOf(['none', 'slideRight', 'slideLeft', 'rectangleIn']),\n\n    /** any additional styles */\n    style: PropTypes.shape,\n};\n\nEZNavItem.defaultProps = {\n    fixedWidth: 'auto',\n    hoverTransition: 'none',\n    colorStyles: {\n        fontColor: 'black',\n        fontColorHover: 'blue',\n        backgroundColor: 'red',\n        backgroundColorHover: 'pink',\n    },\n    style: {},\n};\n\nexport default Radium(EZNavItem);\n","examples":[{"name":"ExampleColoredNavItem","description":"Custom colored nav item","code":"import React from 'react';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n\n/** Custom colored nav item */\nclass ExampleNav extends React.Component {\n    render() {\n        const colorStyles = {\n            fontColor: 'black',\n            fontColorHover: 'black',\n            backgroundColor: 'white',\n            backgroundColorHover: 'darkred',\n        };\n\n        return (\n            <div>\n                <EZNavItem colorStyles={colorStyles} value=\"test\" />\n            </div>\n        );\n    }\n}\n\nexport default ExampleNav;\n"},{"name":"ExampleDefaultNavItem","description":"Default nav item","code":"import React from 'react';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n/** Default nav item */\nclass ExampleNav extends React.Component {\n    render() {\n        return (\n            <div>\n                <EZNavItem value=\"test\" />\n            </div>\n        );\n    }\n}\n\nexport default ExampleNav;\n"},{"name":"ExampleFixedWidthAndHeightNavItem","description":"Nav item with fixed width and height","code":"import React from 'react';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n\n/** Nav item with fixed width and height */\nclass ExampleFixedWidthAndHeightNavItem extends React.Component {\n    render() {\n        return (\n            <div>\n                <EZNavItem style={{ height: '40px' }} fixedWidth=\"60px\" hoverTransition=\"slideRight\" value=\"test\" />\n            </div>\n        );\n    }\n}\n\nexport default ExampleFixedWidthAndHeightNavItem;\n"},{"name":"ExampleRectangleInTransition","description":"Rectangle In transition nav item","code":"import React from 'react';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n/** Rectangle In transition nav item */\nclass ExampleSlideRightTransition extends React.Component {\n    render() {\n        return (\n            <div>\n                <EZNavItem hoverTransition=\"rectangleIn\" value=\"test\" />\n            </div>\n        );\n    }\n}\n\nexport default ExampleSlideRightTransition;\n"},{"name":"ExampleSlideLeftTransition","description":"Slide left nav item","code":"import React from 'react';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n\n/** Slide left nav item */\nclass ExampleSlideLeftTransition extends React.Component {\n    render() {\n        const colorStyles = {\n            fontColor: 'black',\n            fontColorHover: 'black',\n            backgroundColor: 'white',\n            backgroundColorHover: 'darkred',\n        };\n\n        return (\n            <div>\n                <EZNavItem colorStyles={colorStyles} hoverTransition=\"slideLeft\" value=\"test\" />\n            </div>\n        );\n    }\n}\n\nexport default ExampleSlideLeftTransition;\n"},{"name":"ExampleSlideRightTransition","description":"Slide right nav item","code":"import React from 'react';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n\n/** Slide right nav item */\nclass ExampleSlideRightTransition extends React.Component {\n    render() {\n        const colorStyles = {\n            fontColor: 'black',\n            fontColorHover: 'black',\n            backgroundColor: 'white',\n            backgroundColorHover: 'darkred',\n        };\n\n        return (\n            <div>\n                <EZNavItem colorStyles={colorStyles} hoverTransition=\"slideRight\" value=\"test\" />\n            </div>\n        );\n    }\n}\n\nexport default ExampleSlideRightTransition;\n"}]},{"name":"EZNavMobile","description":"Nav menu to contain NavItems for mobile views","props":{"isMobileView":{"type":{"name":"bool"},"required":false,"description":"If the screen size is the size for toggling mobile","defaultValue":{"value":"false","computed":false}},"animation":{"type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'slide-down-full'","computed":false},{"value":"'slide-up-full'","computed":false},{"value":"'slide-left-full'","computed":false},{"value":"'slide-right-full'","computed":false}]},"required":false,"description":"Name of the animation you want the menu to do when being toggled","defaultValue":{"value":"'none'","computed":false}},"isToggled":{"type":{"name":"bool"},"required":false,"description":"If the mobile nav menu is toggled or not.","defaultValue":{"value":"false","computed":false}},"children":{"type":{"name":"element"},"required":true,"description":"nav items you want to put on"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nrequire('./EZNavMobile.sass');\n\n/** Nav menu to contain NavItems for mobile views */\nfunction EZNavMobile({ children, isToggled, animation, isMobileView }) {\n    const navItemClass = classNames(\n        'ez-nav-mobile',\n        `ez-nav-mobile--animation-${animation}`,\n        {\n            'ez-nav-mobile--toggled': isToggled,\n            'ez-hide': !isMobileView,\n        });\n\n    return (\n        <div className={navItemClass}>\n            <ul style={{ listStyle: 'none' }}>\n                { children }\n            </ul>\n        </div>\n    );\n}\n\nEZNavMobile.propTypes = {\n\n    /** If the screen size is the size for toggling mobile */\n    isMobileView: PropTypes.bool,\n\n    /** Name of the animation you want the menu to do when being toggled */\n    animation: PropTypes.oneOf(['none', 'slide-down-full', 'slide-up-full', 'slide-left-full', 'slide-right-full']),\n\n    /** If the mobile nav menu is toggled or not. */\n    isToggled: PropTypes.bool,\n\n    /** nav items you want to put on */\n    children: PropTypes.element.isRequired,\n};\n\nEZNavMobile.defaultProps = {\n    animation: 'none',\n    isToggled: false,\n    isMobileView: false,\n};\n\nexport default EZNavMobile;\n","examples":[{"name":"ExampleSlideDownFullScreen","description":"Slide down full screen menu animation.","code":"import React from 'react';\nimport EZNavMobile from 'EZHeader/EZNavMobile';\n\n/** Slide down full screen menu animation. */\nclass ExampleSlideDownFullScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggled: false,\n        };\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState(prevState => ({\n            toggled: !prevState.toggled,\n        }));\n    }\n\n    render() {\n        const zIndex = this.state.toggled ? 2000 : 0;\n        const btnMsg = this.state.toggled ? 'Hide menu!' : 'Show menu!';\n\n        return (\n            <div>\n                <button style={{ position: 'relative', zIndex }} onClick={this.toggle}>{btnMsg}</button>\n                <EZNavMobile isMobileView animation={'slide-down-full'} isToggled={this.state.toggled} />\n            </div>\n        );\n    }\n}\n\nexport default ExampleSlideDownFullScreen;\n"},{"name":"ExampleSlideLeftFullScreen","description":"Slide down full screen menu animation.","code":"import React from 'react';\nimport EZNavMobile from 'EZHeader/EZNavMobile';\n\n/** Slide down full screen menu animation. */\nclass ExampleSlideDownFullScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggled: false,\n        };\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState(prevState => ({\n            toggled: !prevState.toggled,\n        }));\n    }\n\n    render() {\n        const zIndex = this.state.toggled ? 2000 : 0;\n        const btnMsg = this.state.toggled ? 'Hide menu!' : 'Show menu!';\n\n        return (\n            <div>\n                <button style={{ position: 'relative', zIndex }} onClick={this.toggle}>{btnMsg}</button>\n                <EZNavMobile isMobileView animation={'slide-left-full'} isToggled={this.state.toggled} />\n            </div>\n        );\n    }\n}\n\nexport default ExampleSlideDownFullScreen;\n"},{"name":"ExampleSlideRightFullScreen","description":"Slide down full screen menu animation.","code":"import React from 'react';\nimport EZNavMobile from 'EZHeader/EZNavMobile';\n\n/** Slide down full screen menu animation. */\nclass ExampleSlideDownFullScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggled: false,\n        };\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState(prevState => ({\n            toggled: !prevState.toggled,\n        }));\n    }\n\n    render() {\n        const zIndex = this.state.toggled ? 2000 : 0;\n        const btnMsg = this.state.toggled ? 'Hide menu!' : 'Show menu!';\n\n        return (\n            <div>\n                <button style={{ position: 'relative', zIndex }} onClick={this.toggle}>{btnMsg}</button>\n                <EZNavMobile isMobileView animation={'slide-right-full'} isToggled={this.state.toggled} />\n            </div>\n        );\n    }\n}\n\nexport default ExampleSlideDownFullScreen;\n"},{"name":"ExampleSlideUpFullScreen","description":"Slide down full screen menu animation.","code":"import React from 'react';\nimport EZNavMobile from 'EZHeader/EZNavMobile';\n\n/** Slide down full screen menu animation. */\nclass ExampleSlideDownFullScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggled: false,\n        };\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState(prevState => ({\n            toggled: !prevState.toggled,\n        }));\n    }\n\n    render() {\n        const zIndex = this.state.toggled ? 2000 : 0;\n        const btnMsg = this.state.toggled ? 'Hide menu!' : 'Show menu!';\n\n        return (\n            <div>\n                <button style={{ position: 'relative', zIndex }} onClick={this.toggle}>{btnMsg}</button>\n                <EZNavMobile isMobileView animation={'slide-up-full'} isToggled={this.state.toggled} />\n            </div>\n        );\n    }\n}\n\nexport default ExampleSlideDownFullScreen;\n"}]}]