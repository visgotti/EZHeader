module.exports = /* eslint-disable */ [{"name":"EZHamburger","description":"Hamburger menu toggle","props":{"isMobileView":{"type":{"name":"bool"},"required":false,"description":"If the screen size is the size for toggling mobile","defaultValue":{"value":"false","computed":false}},"onClick":{"type":{"name":"func"},"required":true,"description":"Logic that gets ran when the hamburger is clicked"},"active":{"type":{"name":"bool"},"required":false,"description":"If the Hamburger Button is toggled/active or not.","defaultValue":{"value":"false","computed":false}},"animation":{"type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'spin'","computed":false}]},"required":false,"description":"name of the animation type you want the hamburger to play","defaultValue":{"value":"'none'","computed":false}},"positionOnToggle":{"type":{"name":"enum","value":[{"value":"'normal'","computed":false},{"value":"'fixed-top-right'","computed":false},{"value":"'fixed-top-left'","computed":false}]},"required":false,"description":"positioning of the hamburger when the menu is toggled","defaultValue":{"value":"'normal'","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nrequire('./EZHamburger.sass')\n\n\n/** Hamburger menu toggle */\n\nfunction EZHamburger({onClick, active, animation, positionOnToggle, isMobileView, style}){\n\n    const classes = classNames(\n        'ez-hamburger-animation-'+animation,\n        {\n            'ez-hamburger': true,\n            'ez-hamburger-active': active,\n            'ez-fixed-top-right': positionOnToggle === 'fixed-top-right',\n            'ez-fixed-top-left': positionOnToggle === 'fixed-top-left',\n            'ez-hide': !isMobileView\n        });\n\n    return (\n        <div style = {{...style}} onClick={onClick} className={classes}>\n            <div className=\"ez-hamburger-box\">\n                <div className = \"ez-hamburger-inner\"/>\n            </div>\n        </div>\n    )\n}\n\nEZHamburger.propTypes = {\n\n    /** If the screen size is the size for toggling mobile */\n    isMobileView: PropTypes.bool,\n\n    /** Logic that gets ran when the hamburger is clicked */\n    onClick: PropTypes.func.isRequired,\n\n    /** If the Hamburger Button is toggled/active or not. */\n    active: PropTypes.bool,\n\n    /** name of the animation type you want the hamburger to play */\n    animation: PropTypes.oneOf(['none', 'spin']),\n\n    /** positioning of the hamburger when the menu is toggled */\n    positionOnToggle: PropTypes.oneOf(['normal', 'fixed-top-right', 'fixed-top-left']),\n}\n\nEZHamburger.defaultProps = {\n    active: false,\n    animation: 'none',\n    positionOnToggle: 'normal',\n    isMobileView: false\n};\n\nexport default EZHamburger;","examples":[{"name":"ExampleSpinAnimation","description":"When toggled does spin animation","code":"import React from 'react';\nimport EZHamburger from 'EZHeader/EZHamburger';\n\n/** When toggled does spin animation */\nclass ExampleSpinAnimation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggled: false\n        };\n    }\n\n    toggle() {\n        this.setState(prevState => {\n            return { toggled: !prevState.toggled };\n        })\n    }\n\n    render() {\n        return (\n            <div style = {{height: '50px', width: '50px'}}>\n               <EZHamburger isMobileView active={this.state.toggled} animation='spin' onClick={this.toggle.bind(this)}/>\n            </div>\n        )\n    }\n}\n\nexport default ExampleSpinAnimation;"}]},{"name":"EZHeader","description":"","props":{"mobileToggleSize":{"type":{"name":"custom","raw":"PropTypes.integer"},"required":false,"description":"If the screen size is the size for toggling mobile","defaultValue":{"value":"700","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass EZHeader extends React.Component {\n\n    constructor(){\n        super();\n        this.state = {\n            isMobileView: false\n        }\n    }\n\n    setMobileViewState() {\n        if(document.documentElement.clientWidth <= this.props.mobileMenuShowWidth) {\n            this.setState({ isMobileView: true })\n        } else {\n            this.setState({ isMobileView: false })\n        }\n    }\n\n    componentDidMount() {\n        this.setMobileViewState()\n        window.addEventListener('resize', this.setMobileViewState.bind(this));\n    }\n\n    render() {\n\n        const { height, children } = this.props;\n        const childrenWithProps = React.Children.map(children,\n            (child) => React.cloneElement(child, {\n                isMobileView: this.state.isMobileView\n            })\n        );\n        return (\n            <div style={{ height }} className=\"ez-header\">\n                { childrenWithProps }\n            </div>\n        )\n    }\n}\n\nEZHeader.propTypes = {\n    /** If the screen size is the size for toggling mobile */\n    mobileToggleSize: PropTypes.integer,\n}\n\nEZHeader.defaultProps = {\n    mobileToggleSize: 700\n}\n\nexport default EZHeader","examples":[{"name":"ExampleHeaderPush","description":"Slide down full screen menu animation.","code":"import React from 'react';\nimport EZNavMobile from 'EZHeader/EZNavMobile';\nimport EZHamburger from 'EZHeader/EZHamburger';\nimport EZHeader from 'EZHeader/EZHeader';\n\n\n/** Slide down full screen menu animation. */\nclass ExampleHeaderPush extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggled: false\n        };\n    }\n\n\n    render() {\n        return (\n            <EZHeader>\n                <EZNavMobile animation={'slide-down-full'} isToggled={ this.state.toggled }/>\n                <EZNavMobile animation={'slide-down-full'} isToggled={ this.state.toggled }/>\n            </EZHeader>\n        )\n    }\n}\n\nexport default ExampleHeaderPush;"}]},{"name":"EZNav","description":"Nav to contain NavItems","props":{"isMobileView":{"type":{"name":"bool"},"required":false,"description":"If the screen size is the size for toggling mobile","defaultValue":{"value":"false","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nrequire('./EZNav.sass')\n\n/** Nav to contain NavItems*/\n\nfunction EZNav({children, isMobileView}){\n\n    const navItemClass = classNames({\n        'ez-nav': true,\n        'ez-hide': isMobileView\n    });\n\n    return (\n        <div className = {navItemClass}>\n            { children }\n        </div>\n    )\n}\n\nEZNav.propTypes = {\n    /** If the screen size is the size for toggling mobile */\n    isMobileView: PropTypes.bool,\n}\nEZNav.defaultProps = {\n    isMobileView: false\n};\n\n\nexport default EZNav;","examples":[{"name":"ExampleNav","description":"Simple Nav that goes on a header","code":"import React from 'react';\nimport EZNav from 'EZHeader/EZNav';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n\n/** Simple Nav that goes on a header */\nclass ExampleNav extends React.Component {\n\n    render() {\n\n        return (\n            <div>\n                <EZNav>\n                    <EZNavItem value=\"test\"/>\n                    <EZNavItem value=\"test2\"/>\n                    <EZNavItem value=\"test3\"/>\n                </EZNav>\n            </div>\n        )\n    }\n}\n\nexport default ExampleNav;"},{"name":"ExampleNavFixed","description":"Nav with fixed width and height on the nav items and a slide right animation","code":"import React from 'react';\nimport EZNav from 'EZHeader/EZNav';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n\n/** Nav with fixed width and height on the nav items and a slide right animation */\nclass ExampleNav extends React.Component {\n\n    render() {\n\n        return (\n            <div>\n                <EZNav>\n                    <EZNavItem style={{height: '50px'}} hoverTransition={'slideRight'} fixedWidth={'60px'} value=\"test\"/>\n                    <EZNavItem style={{height: '50px'}} hoverTransition={'slideRight'} fixedWidth={'60px'} value=\"test2\"/>\n                    <EZNavItem style={{height: '50px'}} hoverTransition={'slideRight'} fixedWidth={'60px'} value=\"test3\"/>\n                </EZNav>\n            </div>\n        )\n    }\n}\n\nexport default ExampleNav;"}]},{"name":"EZNavItem","description":"Nav Item for Nav list","props":{"value":{"type":{"name":"string"},"required":true,"description":"What the nav item displays."},"fixedWidth":{"type":{"name":"string"},"required":false,"description":"if you want to set a fixed width for your nav item, if its set to 0 it will use the auto width","defaultValue":{"value":"'auto'","computed":false}},"colorStyles":{"type":{"name":"shape","value":{"fontColor":{"name":"string","required":false},"fontColorHover":{"name":"string","required":false},"backgroundColor":{"name":"string","required":false},"backgroundColorHover":{"name":"string","required":false}}},"required":false,"description":"string of color that you want to use for background","defaultValue":{"value":"{\n    fontColor: 'black',\n    fontColorHover: 'blue',\n    backgroundColor: 'red',\n    backgroundColorHover: 'pink'\n}","computed":false}},"hoverTransition":{"type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'slideRight'","computed":false},{"value":"'slideLeft'","computed":false}]},"required":false,"description":"type of transition you want the nav item to do when it's hovered","defaultValue":{"value":"'none'","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Radium from 'radium';\n\nimport EZNavItemStyler from './EZNavItemStyler';\n\nrequire('./EZNavItem.sass');\n\n/** Nav Item for Nav list */\nfunction EZNavItem({ value, fixedWidth, colorStyles, hoverTransition, style }){\n\n    const styleObject = EZNavItemStyler(fixedWidth, colorStyles, hoverTransition)\n\n    return (\n        <div style = {{display: 'inline-block'}}>\n            <div className={styleObject.classes.navItemClass} style = {{ ...styleObject.styles.navItemStyle, ...style}}>\n                <div className='ez-nav-item-value'>\n                    { value }\n                    <div style = { styleObject.styles.navBackground1Style } className={styleObject.classes.navBackground1Class}/>\n                    <div style = { styleObject.styles.navBackground2Style } className={styleObject.classes.navBackground2Class}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nEZNavItem.propTypes = {\n    /** What the nav item displays. */\n    value: PropTypes.string.isRequired,\n\n    /** if you want to set a fixed width for your nav item, if its set to 0 it will use the auto width */\n    fixedWidth: PropTypes.string,\n\n    /** string of color that you want to use for background */\n    colorStyles: PropTypes.shape({\n        fontColor: PropTypes.string,\n        fontColorHover: PropTypes.string,\n        backgroundColor: PropTypes.string,\n        backgroundColorHover: PropTypes.string\n    }),\n\n    /** type of transition you want the nav item to do when it's hovered */\n    hoverTransition: PropTypes.oneOf(['none', 'slideRight', 'slideLeft'])\n}\n\nEZNavItem.defaultProps = {\n    fixedWidth: 'auto',\n    hoverTransition: 'none',\n    colorStyles: {\n        fontColor: 'black',\n        fontColorHover: 'blue',\n        backgroundColor: 'red',\n        backgroundColorHover: 'pink'\n    }\n};\n\nexport default Radium(EZNavItem);","examples":[{"name":"ExampleColoredNavItem","description":"Custom colored nav item","code":"import React from 'react';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n\n/** Custom colored nav item*/\nclass ExampleNav extends React.Component {\n\n    render() {\n\n        const colorStyles = {\n            fontColor: 'black',\n            fontColorHover: 'black',\n            backgroundColor: 'white',\n            backgroundColorHover: 'darkred'\n        };\n\n        return (\n            <div>\n                <EZNavItem colorStyles={colorStyles} value=\"test\"/>\n            </div>\n        )\n    }\n}\n\nexport default ExampleNav;"},{"name":"ExampleDefaultNavItem","description":"Default nav item","code":"import React from 'react';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n\n/** Default nav item*/\nclass ExampleNav extends React.Component {\n\n    render() {\n\n        return (\n            <div>\n                <EZNavItem value=\"test\"/>\n            </div>\n        )\n    }\n}\n\nexport default ExampleNav;"},{"name":"ExampleFixedWidthAndHeightNavItem","description":"Nav item with fixed width and height","code":"import React from 'react';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n\n/** Nav item with fixed width and height*/\nclass ExampleFixedWidthAndHeightNavItem extends React.Component {\n\n    render() {\n\n        return (\n            <div>\n                <EZNavItem style={{height:'40px'}} fixedWidth='60px' hoverTransition='slideRight' value=\"test\"/>\n            </div>\n        )\n    }\n}\n\nexport default ExampleFixedWidthAndHeightNavItem;"},{"name":"ExampleSlideLeftTransition","description":"Slide left nav item","code":"import React from 'react';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n\n/** Slide left nav item*/\nclass ExampleSlideLeftTransition extends React.Component {\n\n    render() {\n\n        const colorStyles = {\n            fontColor: 'black',\n            fontColorHover: 'black',\n            backgroundColor: 'white',\n            backgroundColorHover: 'darkred'\n        };\n\n        return (\n            <div>\n                <EZNavItem colorStyles={colorStyles} hoverTransition='slideLeft' value=\"test\"/>\n            </div>\n        )\n    }\n}\n\nexport default ExampleSlideLeftTransition;"},{"name":"ExampleSlideRightTransition","description":"Slide right nav item","code":"import React from 'react';\nimport EZNavItem from 'EZHeader/EZNavItem';\n\n\n/** Slide right nav item*/\nclass ExampleSlideRightTransition extends React.Component {\n\n    render() {\n\n        const colorStyles = {\n            fontColor: 'black',\n            fontColorHover: 'black',\n            backgroundColor: 'white',\n            backgroundColorHover: 'darkred'\n        };\n\n        return (\n            <div>\n                <EZNavItem colorStyles={colorStyles} hoverTransition='slideRight' value=\"test\"/>\n            </div>\n        )\n    }\n}\n\nexport default ExampleSlideRightTransition;"}]},{"name":"EZNavMobile","description":"Nav menu to contain NavItems for mobile views","props":{"isMobileView":{"type":{"name":"bool"},"required":false,"description":"If the screen size is the size for toggling mobile","defaultValue":{"value":"false","computed":false}},"animation":{"type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'slide-down-full'","computed":false},{"value":"'slide-up-full'","computed":false},{"value":"'slide-left-full'","computed":false},{"value":"'slide-right-full'","computed":false}]},"required":false,"description":"Name of the animation you want the menu to do when being toggled","defaultValue":{"value":"'none'","computed":false}},"isToggled":{"type":{"name":"bool"},"required":false,"description":"If the mobile nav menu is toggled or not.","defaultValue":{"value":"false","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nrequire('./EZNavMobile.sass')\n\n/** Nav menu to contain NavItems for mobile views*/\n\nfunction EZNavMobile({children, isToggled, animation, isMobileView}){\n\n    const navItemClass = classNames(\n        'ez-nav-mobile',\n        'ez-nav-mobile--animation-'+animation,\n        {\n            'ez-nav-mobile--toggled':  isToggled,\n            'ez-hide': !isMobileView\n        });\n\n    return (\n        <div className={navItemClass}>\n            <ul style={{ listStyle: 'none' }}>\n                { children }\n            </ul>\n        </div>\n    )\n\n}\n\nEZNavMobile.propTypes = {\n\n    /** If the screen size is the size for toggling mobile */\n    isMobileView: PropTypes.bool,\n\n    /** Name of the animation you want the menu to do when being toggled */\n    animation: PropTypes.oneOf(['none', 'slide-down-full', 'slide-up-full', 'slide-left-full', 'slide-right-full']),\n\n    /** If the mobile nav menu is toggled or not. */\n    isToggled: PropTypes.bool\n}\n\nEZNavMobile.defaultProps = {\n    animation: 'none',\n    isToggled: false,\n    isMobileView: false\n};\n\nexport default EZNavMobile;","examples":[{"name":"ExampleSlideDownFullScreen","description":"Slide down full screen menu animation.","code":"import React from 'react';\nimport EZNavMobile from 'EZHeader/EZNavMobile';\nimport EZHamburger from 'EZHeader/EZHamburger';\n\n\n/** Slide down full screen menu animation. */\nclass ExampleSlideDownFullScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggled: false\n        };\n    }\n\n    toggle() {\n        this.setState(prevState => {\n            return { toggled: !prevState.toggled };\n        })\n    }\n\n    render() {\n        const zIndex = this.state.toggled ? 2000 : 0;\n        const btnMsg = this.state.toggled ? 'Hide menu!' : 'Show menu!';\n\n        return (\n            <div>\n                <button style = {{position: 'relative', zIndex}}onClick={this.toggle.bind(this)}>{btnMsg}</button>\n                <EZNavMobile isMobileView animation={'slide-down-full'} isToggled={ this.state.toggled }/>\n            </div>\n        )\n    }\n}\n\nexport default ExampleSlideDownFullScreen;"},{"name":"ExampleSlideLeftFullScreen","description":"Slide left full screen menu animation.","code":"import React from 'react';\nimport EZNavMobile from 'EZHeader/EZNavMobile';\n\n/** Slide left full screen menu animation. */\nclass ExampleSlideDownFullScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggled: false\n        };\n    }\n\n    toggle() {\n        this.setState(prevState => {\n            return { toggled: !prevState.toggled };\n        })\n    }\n\n    render() {\n        const zIndex = this.state.toggled ? 2000 : 0;\n        const btnMsg = this.state.toggled ? 'Hide menu!' : 'Show menu!';\n\n        return (\n            <div>\n                <button style = {{position: 'relative', zIndex}}onClick={this.toggle.bind(this)}>{btnMsg}</button>\n                <EZNavMobile isMobileView animation={'slide-left-full'} isToggled={ this.state.toggled }/>\n            </div>\n        )\n    }\n}\n\nexport default ExampleSlideDownFullScreen;"},{"name":"ExampleSlideRightFullScreen","description":"Slide right full screen menu animation.","code":"import React from 'react';\nimport EZNavMobile from 'EZHeader/EZNavMobile';\n\n/** Slide right full screen menu animation. */\nclass ExampleSlideDownFullScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggled: false\n        };\n    }\n\n    toggle() {\n        this.setState(prevState => {\n            return { toggled: !prevState.toggled };\n        })\n    }\n\n    render() {\n        const zIndex = this.state.toggled ? 2000 : 0;\n        const btnMsg = this.state.toggled ? 'Hide menu!' : 'Show menu!';\n\n        return (\n            <div>\n                <button style = {{position: 'relative', zIndex}}onClick={this.toggle.bind(this)}>{btnMsg}</button>\n                <EZNavMobile isMobileView animation={'slide-right-full'} isToggled={ this.state.toggled }/>\n            </div>\n        )\n    }\n}\n\nexport default ExampleSlideDownFullScreen;"},{"name":"ExampleSlideUpFullScreen","description":"Slide up full screen menu animation.","code":"import React from 'react';\nimport EZNavMobile from 'EZHeader/EZNavMobile';\n\n/** Slide up full screen menu animation. */\nclass ExampleSlideDownFullScreen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggled: false\n        };\n    }\n\n    toggle() {\n        this.setState(prevState => {\n            return { toggled: !prevState.toggled };\n        })\n    }\n\n    render() {\n        const zIndex = this.state.toggled ? 2000 : 0;\n        const btnMsg = this.state.toggled ? 'Hide menu!' : 'Show menu!';\n\n        return (\n            <div>\n                <button style = {{position: 'relative', zIndex}}onClick={this.toggle.bind(this)}>{btnMsg}</button>\n                <EZNavMobile isMobileView animation={'slide-up-full'} isToggled={ this.state.toggled }/>\n            </div>\n        )\n    }\n}\n\nexport default ExampleSlideDownFullScreen;"}]}]